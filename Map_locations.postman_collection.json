{
	"info": {
		"_postman_id": "6a209053-02b9-40e1-9a5f-fdc6dcae6f72",
		"name": "Map_locations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add location",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = JSON.parse(responseBody); // const jsonData = pm.response.json();\r",
							"\r",
							"const body = JSON.parse(pm.request.body.raw);\r",
							"requestBody = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"addRequestBody\", requestBody);\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test (\"Status is OK\", () => {\r",
							"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test (\"place_id is not empty\", () => {\r",
							"    pm.expect(jsonData.place_id).is.not.empty;\r",
							"    pm.collectionVariables.set(\"new_place_id\", jsonData.place_id);\r",
							"});\r",
							"\r",
							"pm.test (\"place_id is not empty\", () => {\r",
							"    pm.expect(jsonData.reference).is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test (\"place_id is not empty\", () => {\r",
							"    pm.expect(jsonData.id).is.not.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"location\": {\r\n    \"lat\": -38.383494,\r\n    \"lng\": 33.427362\r\n  },\r\n  \"accuracy\": 50,\r\n  \"name\": \"{{name}}\",\r\n  \"phone_number\": \"{{phone_number}}\",\r\n  \"address\": \"{{address}}\",\r\n  \"types\": [\r\n    \"house\",\r\n    \"shop\"\r\n  ],\r\n  \"website\": \"http://google.com/oleg\",\r\n  \"language\": \"Russian\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/add/json?key={{key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"add",
						"json"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get location",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = JSON.parse(responseBody); //or const jsonData = pm.response.json();\r",
							"const addRequest = JSON.parse(pm.collectionVariables.get('addRequestBody'));\r",
							"\r",
							"pm.test(\"Status test 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 3000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", () => {\r",
							"        pm.expect(pm.response.to.be.json);\r",
							"});\r",
							"\r",
							"pm.test (\"Post equals get\", () => {\r",
							"    pm.expect(jsonData.location.latitude).to.eql(JSON.stringify(addRequest.location.lat));\r",
							"    pm.expect(jsonData.location.longitude).to.eql(JSON.stringify(addRequest.location.lng));\r",
							"    pm.expect(jsonData.accuracy).to.eql(JSON.stringify(addRequest.accuracy));\r",
							"    pm.expect(jsonData.phone_number).to.eql(addRequest.phone_number);\r",
							"    pm.expect(jsonData.address).to.eql(addRequest.address);\r",
							"    pm.expect(jsonData.types).to.eql(jsonData.types.toString());\r",
							"    pm.expect(jsonData.website).to.eql(addRequest.website);\r",
							"    pm.expect(jsonData.language).to.eql(addRequest.language);\r",
							"});\r",
							"\r",
							"pm.test(\"Header content type\", () => {\r",
							"        pm.expect(pm.response.to.have.header(\"Content-type\"))\r",
							"});\r",
							"\r",
							"\r",
							"pm.test (\"Location name\", () => {\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get('name'));\r",
							"});\r",
							"\r",
							"pm.test (\"Location adress\", () => {\r",
							"    pm.expect(jsonData.address).to.eql(pm.collectionVariables.get('address'));\r",
							"});\r",
							"\r",
							"pm.test (\"Location phone\", () => {\r",
							"    pm.expect(jsonData.phone_number).to.eql(pm.collectionVariables.get('phone_number'));\r",
							"});\r",
							"\r",
							"pm.test(\"Error in text\", function () {\r",
							"    if ((pm.response.code) == 200) {\r",
							"        pm.expect(pm.response.text()).to.not.include(\"fail\");\r",
							"    }\r",
							"    else {\r",
							"        pm.expect(pm.response.text()).to.include(\"fail\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/get/json?place_id={{new_place_id}}&key={{key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"get",
						"json"
					],
					"query": [
						{
							"key": "place_id",
							"value": "{{new_place_id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit location",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = JSON.parse(responseBody); //or const jsonData = pm.response.json();\r",
							"\r",
							"const body = JSON.parse(pm.request.body.raw);\r",
							"requestBody = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"editRequestBody\", requestBody);\r",
							"\r",
							"pm.test(\"Status test 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 3000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test (\"Status is OK\", () => {\r",
							"    pm.expect(jsonData.msg).to.eql(\"Address successfully updated\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"place_id\": \"{{new_place_id}}\",\r\n  \"address\":\"{{new_address}}\",\r\n  \"key\": \"{{key}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/update/json?key={{key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"update",
						"json"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get location with new adress",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = JSON.parse(responseBody); //or const jsonData = pm.response.json();\r",
							"\r",
							"const addRequest = JSON.parse(pm.collectionVariables.get('addRequestBody'));\r",
							"const editRequest = JSON.parse(pm.collectionVariables.get('editRequestBody'));\r",
							"\r",
							"console.log(addRequest);\r",
							"\r",
							"pm.test(\"Status test 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 3000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test (\"Status is OK\", () => {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"fail\");\r",
							"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
							"});\r",
							"\r",
							"pm.test (\"Post equals get\", () => {\r",
							"    pm.expect(jsonData.location.latitude).to.eql(JSON.stringify(addRequest.location.lat));\r",
							"    pm.expect(jsonData.location.longitude).to.eql(JSON.stringify(addRequest.location.lng));\r",
							"    pm.expect(jsonData.accuracy).to.eql(JSON.stringify(addRequest.accuracy));\r",
							"    pm.expect(jsonData.phone_number).to.eql(addRequest.phone_number);\r",
							"    pm.expect(jsonData.address).to.eql(editRequest.address);\r",
							"    pm.expect(jsonData.types).to.eql(jsonData.types.toString());\r",
							"    pm.expect(jsonData.website).to.eql(addRequest.website);\r",
							"    pm.expect(jsonData.language).to.eql(addRequest.language);\r",
							"});\r",
							"\r",
							"pm.test (\"Location name\", () => {\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get('name'));\r",
							"});\r",
							"\r",
							"pm.test (\"Location adress\", () => {\r",
							"    pm.expect(jsonData.address).to.eql(pm.collectionVariables.get('new_address'));\r",
							"});\r",
							"\r",
							"pm.test (\"Location phone\", () => {\r",
							"    pm.expect(jsonData.phone_number).to.eql(pm.collectionVariables.get('phone_number')); \r",
							"});\r",
							"\r",
							"pm.test(\"Error in text\", function () {\r",
							"    if ((pm.response.code) == 200) {\r",
							"        pm.expect(pm.response.text()).to.not.include(\"fail\");\r",
							"    }\r",
							"    else {\r",
							"        pm.expect(pm.response.text()).to.include(\"fail\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/get/json?place_id={{new_place_id}}&key={{key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"get",
						"json"
					],
					"query": [
						{
							"key": "place_id",
							"value": "{{new_place_id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete location",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = JSON.parse(responseBody); //or const jsonData = pm.response.json();\r",
							"\r",
							"//check response status code\r",
							"pm.test(\"Status test 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 3000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test (\"Status is OK\", () => {\r",
							"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"place_id\":\"{{new_place_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delete/json?key={{key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delete",
						"json"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get location after deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = JSON.parse(responseBody); //or const jsonData = pm.response.json();\r",
							"\r",
							"console.log(pm.request.body);\r",
							"\r",
							"pm.test(\"Status test 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 3000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test (\"Status is OK\", () => {\r",
							"    pm.expect(jsonData.msg).to.eql(\"Get operation failed, looks like place_id  doesn't exists\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error in text\", function () {\r",
							"    if ((pm.response.code) == 200) {\r",
							"        pm.expect(pm.response.text()).to.not.include(\"fail\");\r",
							"    }\r",
							"    else {\r",
							"        pm.expect(pm.response.text()).to.include(\"fail\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/get/json?place_id={{new_place_id}}&key={{key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"get",
						"json"
					],
					"query": [
						{
							"key": "place_id",
							"value": "{{new_place_id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "new_place_id",
			"value": "f0b624a68adc461dcf1b1bef1fe0de5d"
		},
		{
			"key": "baseUrl",
			"value": "https://rahulshettyacademy.com/maps/api/place",
			"type": "string"
		},
		{
			"key": "key",
			"value": "qaclick123",
			"type": "string"
		},
		{
			"key": "address",
			"value": "Saratov, Lenina st.",
			"type": "string"
		},
		{
			"key": "name",
			"value": "My new place",
			"type": "string"
		},
		{
			"key": "phone_number",
			"value": "+79991112233",
			"type": "string"
		},
		{
			"key": "new_address",
			"value": "Saratov, Lenina st.24",
			"type": "string"
		},
		{
			"key": "addRequestBody",
			"value": ""
		},
		{
			"key": "editRequestBody",
			"value": "",
			"type": "string"
		}
	]
}